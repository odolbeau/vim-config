snippet gs "PHP Class Getter / Setter" b
public function get${1/\w+\s*/\u$0/}(): $2
{
    return $this->$1;
}

public function set${1/\w+\s*/\u$0/}(${2} $$1): void
{
    $this->$1 = $$1;
}
endsnippet

snippet get "PHP Class Getter" b
public function get${1/\w+\s*/\u$0/}(): $2
{
    return $this->$1;
}
endsnippet

snippet set "PHP Class Setter" b
public function set${1/\w+\s*/\u$0/}(${2} $$1): void
{
    $this->$1 = $$1;
}
endsnippet

snippet c1 "Constructor with 1 argument" b
public function __construct(
    private $1 $$2,
) {
}

${0}
endsnippet

snippet c2 "Constructor with 2 arguments" b
public function __construct(
    private $1 $$2,
    private $3 $$4,
) {
}

${0}
endsnippet

snippet c3 "Constructor with 3 arguments" b
public function __construct(
    private $1 $$2,
    private $3 $$4,
    private $5 $$6,
) {
}

${0}
endsnippet

snippet inherit "Inherit doc block" b
/**
 * {@inheritdoc}
 */
${0}
endsnippet

snippet useem "use Doctrine EM statement" b
use Doctrine\ORM\EntityManagerInterface;${0}
endsnippet

snippet usereq "Use Symfony request statement" b
use Symfony\Component\HttpFoundation\Request;${0}
endsnippet

snippet m "Create a new method" b
${1:public} function ${2}(${3}): ${4}
{
    ${0}
}
endsnippet

snippet for "for ($i = 0; $i < $count; ++$i) { ... }" b
for ($${1:i} = 0; $$1 < ${2:count}; ++$$1) {
    ${0}
}
endsnippet

snippet dst "declare strict types" b
declare(strict_types=1);${0}
endsnippet

snippet phpstaninl "Phpstan ignore next line" b
/* @phpstan-ignore-next-line */${0}
endsnippet
