snippet c1
	private $${1};

	public function __construct(${0}$$1)
	{
		$this->$1 = $$1;
	}
snippet c2
	private $${1};
	private $${2};

	public function __construct(${0}$$1, $$2)
	{
		$this->$1 = $$1;
		$this->$2 = $$2;
	}
snippet c3
	private $${1};
	private $${2};
	private $${3};

	public function __construct(${0}$$1, $$2, $$3)
	{
		$this->$1 = $$1;
		$this->$2 = $$2;
		$this->$3 = $$3;
	}
snippet inherit
	/**
	 * {@inheritdoc}
	 */
	${0}
snippet dd
	dump(${1});die;
	${0}
snippet usereq
	use Symfony\Component\HttpFoundation\Request;${0}
snippet uselog
	use Psr\Log\LoggerInterface;
	use Psr\Log\NullLogger;${0}
snippet usecon
	use Doctrine\DBAL\Connection;${0}
snippet m
	${1:public} function ${2}(${3}): ${4}
	{
		${0}
	}
snippet if "if (condition) { ... }"
	if (${1}) {
		${0}
	}
snippet switch "switch($var) { case 'xyz': ... default: .... }"
	switch ($${1:variable}) {
		case '${2:value}':
			${3}
			break;
		${0}
		default:
			${4}
	}
snippet for "for ($i = 0; $i < $count; $i++) { ... }"
	for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++}) {
		${0}
	}
snippet foreach "foreach ($var as $value) { .. }"
	foreach ($${1:variable} as $${2:value}) {
		${0}
	}
snippet try "try { ... } catch (Exception $e) { ... }"
	try {
		${0}
	} catch (${1:Exception} $e) {
	}
snippet pre
	echo '<pre>'; dump(${0}); echo '</pre>';
snippet te "throw new Exception()"
	throw new ${1:Exception}("${2:Error Processing Request}");
snippet dst "declare strict types"
	declare(strict_types=1);${0}
