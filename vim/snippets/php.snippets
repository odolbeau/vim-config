snippet cl
	<?php

	namespace ${1:`substitute(substitute(expand("%:h"), '\v^\w+\/(\u)', '\1', ''), '\/', '\\\', 'g')`};

	class ${3:`vim_snippets#Filename()`}
	{
	    ${0}
	}
snippet ns
	namespace ${1:`substitute(substitute(expand("%:h"), '\v^\w+\/(\u)', '\1', ''), '\/', '\\\', 'g')`};${0}
snippet i
	<?php

	namespace ${1:`substitute(substitute(expand("%:h"), '\v^\w+\/(\u)', '\1', ''), '\/', '\\\', 'g')`};

	interface ${2:`vim_snippets#Filename()`}
	{
	    ${0}
	}
snippet test
	<?php

	namespace ${1:`substitute(substitute(expand("%:h"), '\v^\w+\/(\u)', '\1', ''), '\/', '\\\', 'g')`};

    use PHPUnit\Framework\TestCase;
	use Prophecy\Argument;
	use ${2:`substitute(substitute(substitute(expand("%:h"), '\v^\w+\/(\u)', '\1', ''), '\/', '\\\', 'g'), '\\Tests', '', '') . '\\' . substitute(vim_snippets#Filename(), 'Test', '', '')`};

	class ${3:`vim_snippets#Filename()`} extends TestCase
	{
	    public function test_it_is_initializable()
	    {
            $this->assertInstanceOf('${2:`substitute(substitute(substitute(expand("%:h"), '\v^\w+\/(\u)', '\1', ''), '\/', '\\\', 'g'), '\\Tests', '', '') . '\\' . substitute(vim_snippets#Filename(), 'Test', '', '')`}', ${4:myVar});${0}
	    }
	}
snippet c1
	private $${1};

	public function __construct(${0}$$1)
	{
		$this->$1 = $$1;
	}
snippet c2
	private $${1};
	private $${2};

	public function __construct(${0}$$1, $$2)
	{
		$this->$1 = $$1;
		$this->$2 = $$2;
	}
snippet c3
	private $${1};
	private $${2};
	private $${3};

	public function __construct(${0}$$1, $$2, $$3)
	{
		$this->$1 = $$1;
		$this->$2 = $$2;
		$this->$3 = $$3;
	}
snippet c4
	private $${1};
	private $${2};
	private $${3};
	private $${4};

	public function __construct(${0}$$1, $$2, $$3, $$4)
	{
		$this->$1 = $$1;
		$this->$2 = $$2;
		$this->$3 = $$3;
		$this->$4 = $$4;
	}
snippet c5
	private $${1};
	private $${2};
	private $${3};
	private $${4};
	private $${5};

	public function __construct(${0}$$1, $$2, $$3, $$4, $$5)
	{
		$this->$1 = $$1;
		$this->$2 = $$2;
		$this->$3 = $$3;
		$this->$4 = $$4;
		$this->$5 = $$5;
	}
snippet inherit
	/**
	 * {@inheritdoc}
	 */
	${0}
snippet ddump
	echo '<pre>';
	\Doctrine\Common\Util\Debug::dump(${1});
	echo '</pre>';
	${0}
snippet usereq
	use Symfony\Component\HttpFoundation\Request;${0}
snippet uselog
	use Psr\Log\LoggerInterface;
	use Psr\Log\NullLogger;${0}
snippet usecon
	use Doctrine\DBAL\Connection;${0}
snippet m
	${1:public} function ${2:foo}(${3})
	{
		${0}
	}
snippet wh "while (condition) { ... }"
	while (${1:/* condition */}) {
		${0}
	}
snippet if "if (condition) { ... }"
	if (${1}) {
		${0}
	}
snippet ife "if (cond) { ... } else { ... }"
	if (${1}) {
		${2}
	} else {
		${3}
	}
	${0}
snippet switch "switch($var) { case 'xyz': ... default: .... }"
	switch ($${1:variable}) {
		case '${2:value}':
			${3}
			break;
		${0}
		default:
			${4}
			break;
	}
snippet for "for ($i = 0; $i < $count; $i++) { ... }"
	for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++}) {
		${0}
	}
snippet foreach "foreach ($var as $value) { .. }"
	foreach ($${1:variable} as $${2:value}) {
		${0}
	}
snippet foreachk "foreach ($var as $key => $value) { .. }"
	foreach ($${1:variable} as $${2:key} => $${3:value}) {
		${0}
	}
snippet try "try { ... } catch (Exception $e) { ... }"
	try {
		${0}
	} catch (${1:Exception} $e) {
	}
snippet pre
	echo '<pre>'; var_dump(${0}); echo '</pre>';
snippet vd
	var_dump(${0});
snippet vdd
	var_dump(${1}); die(${0:});
# phpunit
snippet ass "$this->assertSame()"
	$this->assertSame(${1:expected}, ${2:actual});
snippet ase "$this->assertEquals()"
	$this->assertEquals(${1:expected}, ${2:actual});
snippet asne "$this->assertNotEquals()"
	$this->assertNotEquals(${1:expected}, ${2:actual});
snippet ascon "$this->assertContains()"
	$this->assertContains(${1:$needle}, ${2:$haystack});
snippet ashk "$this->assertArrayHasKey()"
	$this->assertArrayHasKey(${1:$key}, ${2:$array});
snippet asnhk "$this->assertArrayNotHasKey()"
	this->assertArrayNotHasKey(${1:$key}, ${2:$array});
snippet asi "$this->assertInstanceOf(...)"
	$this->assertInstanceOf(${1:expected}, ${2:actual});
snippet fail "$this->fail()"
	$this->fail(${1});
snippet marki "$this->markTestIncomplete()"
	$this->markTestIncomplete(${1});
snippet marks "$this->markTestSkipped()"
	$this->markTestSkipped(${1});
# end of phpunit snippets
snippet te "throw new Exception()"
	throw new ${1:Exception}("${2:Error Processing Request}");
snippet ia "in_array"
	in_array(${1:needle}, ${2:haystack})${0}
snippet is "isset"
	isset(${1:var})${0}
snippet ake "array_key_exists"
	array_key_exists($${1:key}, ${2:array})${0}
